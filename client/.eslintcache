[{"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\index.tsx":"1","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\App.tsx":"3","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\components\\Categories.tsx":"4","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\screens\\HomeScreen.tsx":"5","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\apollo\\client.ts":"6","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\screens\\JokeScreen.tsx":"7","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\store.ts":"8","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\reducers\\jokeReducer.ts":"9","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\actions\\types.ts":"10","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\actions\\jokeActions.ts":"11","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\components\\Loader.tsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1660,"mtime":1610557084915,"results":"16","hashOfConfig":"14"},{"size":1954,"mtime":1610552672783,"results":"17","hashOfConfig":"14"},{"size":728,"mtime":1610552615931,"results":"18","hashOfConfig":"14"},{"size":184,"mtime":1610457987176,"results":"19","hashOfConfig":"14"},{"size":1481,"mtime":1610556289475,"results":"20","hashOfConfig":"14"},{"size":779,"mtime":1610540613142,"results":"21","hashOfConfig":"14"},{"size":1260,"mtime":1610552310217,"results":"22","hashOfConfig":"14"},{"size":228,"mtime":1610551647977,"results":"23","hashOfConfig":"14"},{"size":2205,"mtime":1610556684250,"results":"24","hashOfConfig":"14"},{"size":410,"mtime":1610548491504,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"6uxf22",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\index.tsx",[],["54","55"],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\App.tsx",["56","57","58"],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\components\\Categories.tsx",["59","60"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  getRandomJoke,\r\n  getAllCategories,\r\n  getChosenCategory,\r\n} from \"../actions/jokeActions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport categoryStyles from \"./categories.module.css\";\r\nimport axios from \"axios\";\r\nimport Loader from \"./Loader\";\r\n\r\n// TS props is an array of strings with each category name from API\r\n\r\ninterface Props {\r\n  categories: string[];\r\n}\r\n\r\nconst Categories: React.FC<Props> = ({ categories }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllCategories());\r\n    if (!categories) {\r\n      setLoading(true);\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n  const [jokeCategory, setJokeCategory] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const categoryClickHandler = (e: any) => {\r\n    setJokeCategory(e.target.innerHTML);\r\n    console.log(jokeCategory);\r\n    dispatch(getChosenCategory(jokeCategory));\r\n    dispatch(getRandomJoke(jokeCategory));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <Loader />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h2>Joke Categories:</h2>\r\n        <p>Select a category for a random joke</p>\r\n        <div className={categoryStyles.categoriesContainer}>\r\n          {categories.map((cat, index) => {\r\n            return (\r\n              <div key={index} className={categoryStyles.categoryItem}>\r\n                <Link\r\n                  to={{\r\n                    pathname: \"/randomJoke\",\r\n                    state: {\r\n                      chosenCategory: jokeCategory,\r\n                    },\r\n                  }}\r\n                >\r\n                  <button onClick={categoryClickHandler}>{cat}</button>\r\n                </Link>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Categories;\r\n","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\screens\\HomeScreen.tsx",[],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\apollo\\client.ts",[],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\screens\\JokeScreen.tsx",["61","62","63"],"import React, { useEffect, useState } from \"react\";\r\nimport approved from \"../approved.jpg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport jokeScreenStyle from \"./jokeScreenStyle.module.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getRandomJoke } from \"../actions/jokeActions\";\r\nimport Loader from \"../components/Loader\";\r\nimport axios from \"axios\";\r\n\r\ninterface Props {\r\n  category: string;\r\n}\r\n\r\nconst JokeScreen: React.FC<Props> = ({ category }) => {\r\n  // const dispatch = useDispatch();\r\n\r\n  const [currentRandomJoke, setCurrentRandomJoke] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //NOT WORKING\r\n  const getRandomJokeFromAPI = async () => {\r\n    const res = await axios.get(\r\n      `https://api.chucknorris.io/jokes/random?category=${category}`\r\n    );\r\n    console.log(res.data);\r\n    const retrievedJoke = res.data.value;\r\n    setCurrentRandomJoke(retrievedJoke);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // dispatch(getRandomJoke(category));\r\n    console.log(category);\r\n    getRandomJokeFromAPI();\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <Loader />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className={jokeScreenStyle.jokescreenMain}>\r\n        <img src={approved} alt=\"\" />\r\n        <h2>{currentRandomJoke}</h2>\r\n        <div>\r\n          <Link to=\"/\">\r\n            <button>Back Home</button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default JokeScreen;\r\n","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\store.ts",[],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\reducers\\jokeReducer.ts",[],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\actions\\types.ts",[],"C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\actions\\jokeActions.ts",["64"],"import {\r\n  GET_RANDOM_JOKE,\r\n  GET_ALL_CATEGORIES,\r\n  GET_CHOSEN_CATEGORY,\r\n} from \"./types\";\r\nimport { request, gql } from \"graphql-request\";\r\nimport axios from \"axios\";\r\n\r\n//actions for retrieving random joke and all categories\r\n\r\n//random joke action takes in category as argument, calls apollo request to graphql backend\r\nexport const getRandomJoke = (category: string) => async (dispatch: any) => {\r\n  //random joke graphql query\r\n  const randomJokeQuery = gql`\r\n    {\r\n      randomJokeByCategory(category: getRandomJoke.category) {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  `;\r\n\r\n  // using graphql request package to make request\r\n  // request(\"https://localhost:5000/graphql\", randomJokeQuery, category)\r\n  axios\r\n    .get(\"https://localhost:5000/graphql\")\r\n    .then((joke) => console.log(joke))\r\n    .then((jokeData) => {\r\n      try {\r\n        console.log(jokeData);\r\n        dispatch({\r\n          type: GET_RANDOM_JOKE,\r\n          payload: {\r\n            jokeData,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n};\r\n\r\n//retreive a chosen category by the user\r\nexport const getChosenCategory = (category: string) => (dispatch: any) => {\r\n  try {\r\n    dispatch({\r\n      type: GET_CHOSEN_CATEGORY,\r\n      payload: category,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  return category;\r\n};\r\n\r\n//retrieve all categories action calls apollo query to request categories from backend\r\n\r\n//the action will save the categories as an array of strings in the actions payload\r\n\r\nexport const getAllCategories = () => (dispatch: any) => {\r\n  //get all categories graphql query\r\n  const getCategoriesQuery = gql`\r\n    {\r\n      getCategories {\r\n        category\r\n      }\r\n    }\r\n  `;\r\n  //using graphql request package for request to backend\r\n  request(\"https://localhost:5000/graphql\", getCategoriesQuery)\r\n    .then((categories) => console.log(categories))\r\n    .then((categoriesData) => {\r\n      try {\r\n        dispatch({\r\n          type: GET_ALL_CATEGORIES,\r\n          payload: {\r\n            categories: [categoriesData],\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n};\r\n","C:\\Users\\max_d\\OneDrive\\Desktop\\fullstack-chucknorris\\client\\src\\components\\Loader.tsx",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":27},{"ruleId":"69","severity":1,"message":"73","line":7,"column":10,"nodeType":"71","messageId":"72","endLine":7,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":36,"column":6,"nodeType":"76","endLine":36,"endColumn":8,"suggestions":"77"},{"ruleId":"69","severity":1,"message":"78","line":10,"column":8,"nodeType":"71","messageId":"72","endLine":10,"endColumn":13},{"ruleId":"74","severity":1,"message":"79","line":29,"column":6,"nodeType":"76","endLine":29,"endColumn":8,"suggestions":"80"},{"ruleId":"69","severity":1,"message":"73","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":21},{"ruleId":"69","severity":1,"message":"81","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":23},{"ruleId":"69","severity":1,"message":"82","line":18,"column":19,"nodeType":"71","messageId":"72","endLine":18,"endColumn":29},{"ruleId":"69","severity":1,"message":"83","line":14,"column":9,"nodeType":"71","messageId":"72","endLine":14,"endColumn":24},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"@typescript-eslint/no-unused-vars","'getChosenCategory' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setInitialJoke'. Either include it or remove the dependency array.","ArrayExpression",["86"],"'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'categories' and 'dispatch'. Either include them or remove the dependency array.",["87"],"'getRandomJoke' is defined but never used.","'setLoading' is assigned a value but never used.","'randomJokeQuery' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [setInitialJoke]",{"range":"92","text":"93"},"Update the dependencies array to be: [categories, dispatch]",{"range":"94","text":"95"},[1027,1029],"[setInitialJoke]",[734,736],"[categories, dispatch]"]